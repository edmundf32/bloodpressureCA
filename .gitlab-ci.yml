include:
  - template: Jobs/SAST.gitlab-ci.yml

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  DOCKER_REGISTRY: 315658191689.dkr.ecr.eu-west-1.amazonaws.com
  AWS_DEFAULT_REGION: eu-west-1
  APP_NAME: bloodpressure
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

cache:
  paths:
    - .m2/repository/

stages:
- build
- test
- publish
#- deploy
- codequality
- ZAP
- sast
- loadtest-local
- e2e
- deploy

spotbugs-sast:
  variables:
    JAVA_HOME: /opt/asdf/installs/java/adoptopenjdk-11.0.9+101


build:
  stage: build
  tags:
   - fargate
  image: maven:3.6.1-jdk-8-slim
  script:
  - echo "Building app..."
  - mvn clean install
  - echo "Finished building the app."
  artifacts:
    expire_in: 1 week
    paths:
    - target/bloodpressure.jar
  only:
  - master

test:
  stage: test
  image: maven:3.6.3-jdk-11
  script:
    - mvn test
  artifacts:
    expire_in: 10 min
    paths:
      - target/

publish:
  stage: publish
  tags:
   - docker
  image: docker:stable
  services:
    - docker:dind  
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install --no-cache-dir awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set aws_default_region eu-west-1
    - aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 315658191689.dkr.ecr.eu-west-1.amazonaws.com
    #-p $(aws ecr get-login-password --region the-region-you-are-in) xxxxxxxxx.dkr.ecr.the-region-you-are-in.amazonaws.com
    #- aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  script:
    - docker build -t bloodpressure .
    - docker tag bloodpressure:latest 315658191689.dkr.ecr.eu-west-1.amazonaws.com/bloodpressure:latest
    - docker push 315658191689.dkr.ecr.eu-west-1.amazonaws.com/bloodpressure:latest

codequality:
  stage: codequality
  image: maven:3.6.3-jdk-11
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
  script:
    - mvn sonar:sonar
  only:
    - master 

Zap: 
  stage: ZAP
  tags:
   - docker
  image:
    name: owasp/zap2docker-weekly
  before_script:
    - mkdir -p /zap/wrk
  script:
    - pwd
    - ls
    - zap-full-scan.py -t "http://bloodpressure.wnlcloud.com/" -m 1 -d -I -r testreport.html 
    - cp /zap/wrk/testreport.html testreport.html
  artifacts:
    when: always
    paths:
      - testreport.html
  only:
    - master

sast:
  stage: sast
  image: docker:latest
  tags:
   - docker
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:dind
  #before_script:
  # - source /root/.bashrc && switch_to java 8
  script:
    - export SAST_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run 
        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}" 
        --env SAST_DISABLE_REMOTE_CHECKS="${SAST_DISABLE_REMOTE_CHECKS:-false}" 
        --volume "$PWD:/code" 
        --volume /var/run/docker.sock:/var/run/docker.sock 
        "registry.gitlab.com/gitlab-org/security-products/sast:$SAST_VERSION" /app/bin/run /code
  artifacts:
    paths: [gl-sast-report.json]

loadtest-local:
  tags:
   - docker
  image:
    name: loadimpact/k6:latest
    entrypoint: ['']
  stage: loadtest-local
  script:
    - echo "executing local k6 in k6 container..."
    - k6 run ./loadtests/performance-test.js
  only:
    - master

e2e tests:
    stage: e2e
    tags:
      - docker
    image: mcr.microsoft.com/playwright:v1.28.1-focal
    script:
      - npm ci
      - npm run test:tests tests/acceptance/features/todo.feature --publish
 
deploy:
  stage: deploy
  tags:
    - docker
  script:
    - apk add --no-cache python3 py3-pip
    - pip3 install --no-cache-dir awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set aws_default_region eu-west-1
    - aws ecs update-service --cluster "$CLUSTER" --service "$PROJECT" --force-new-deployment
  rules:
    - if: $CI_COMMIT_BRANCH == "Production"
      when: manual



# https://mihajlonesic.gitlab.io/archive/deploy-spring-boot-on-aws-ec2-with-gitlab/
#deploy:
#  stage: deploy
#  image: alpine:3.11
#  before_script:
#  - apk update && apk add openssh-client bash
#  - mkdir -p ~/.ssh
#  - eval $(ssh-agent -s)
#  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#  - touch ~/.ssh/config
#  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#  - ssh-keyscan -H $DEPLOY_SERVER_IP >> ~/.ssh/known_hosts
#  script:
#  - echo "Deploying started..."
#  - ssh ubuntu@$DEPLOY_SERVER_IP "sudo systemctl stop bloodpressure.service"
#  - scp ./target/bloodpressure.jar ubuntu@$DEPLOY_SERVER_IP:~/bloodpressure/
#  - ssh ubuntu@$DEPLOY_SERVER_IP "sudo systemctl start bloodpressure.service"
#  - echo "Finished deploying the app."
#  only:
#  - master
